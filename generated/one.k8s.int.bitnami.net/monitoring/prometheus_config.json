{
   "apiVersion": "v1",
   "data": {
      "prometheus.yml": "{\"global\": {\"external_labels\": {\"cluster\": \"one.k8s.int.bitnami.net\"}, \"scrape_interval\": \"1m\"}, \"rule_files\": [\"/etc/prometheus-config/*.rules\"], \"scrape_configs\": [{\"ec2_sd_configs\": [{\"region\": \"us-east-1\"}], \"job_name\": \"ec2_servers\", \"relabel_configs\": [{\"action\": \"keep\", \"regex\": \"full|whitebox\", \"source_labels\": [\"__meta_ec2_tag_monitoring_type\"]}, {\"replacement\": \"$1\", \"source_labels\": [\"__meta_ec2_tag_monitoring_vhost\"], \"target_label\": \"__address__\"}, {\"source_labels\": [\"__meta_ec2_tag_Name\"], \"target_label\": \"name\"}, {\"source_labels\": [\"__meta_ec2_tag_kind_of\"], \"target_label\": \"kind_of\"}, {\"source_labels\": [\"__meta_ec2_tag_stage\"], \"target_label\": \"stage\"}, {\"source_labels\": [\"__meta_ec2_tag_role\"], \"target_label\": \"role\"}], \"scheme\": \"https\", \"tls_config\": {\"insecure_skip_verify\": true}}, {\"ec2_sd_configs\": [{\"region\": \"us-east-1\"}], \"job_name\": \"ec2_servers_blackbox\", \"metrics_path\": \"/probe\", \"params\": {\"module\": [\"http_2xx\"]}, \"relabel_configs\": [{\"action\": \"keep\", \"regex\": \"full|blackbox\", \"source_labels\": [\"__meta_ec2_tag_monitoring_type\"]}, {\"regex\": \"(.*)\", \"replacement\": \"https://$1\", \"source_labels\": [\"__meta_ec2_tag_monitoring_vhost\"], \"target_label\": \"__param_target\"}, {\"replacement\": \"blackbox:9115\", \"target_label\": \"__address__\"}, {\"source_labels\": [\"__param_target\"], \"target_label\": \"instance\"}, {\"source_labels\": [\"__meta_ec2_tag_Name\"], \"target_label\": \"name\"}, {\"source_labels\": [\"__meta_ec2_tag_kind_of\"], \"target_label\": \"kind_of\"}, {\"source_labels\": [\"__meta_ec2_tag_stage\"], \"target_label\": \"stage\"}, {\"source_labels\": [\"__meta_ec2_tag_role\"], \"target_label\": \"role\"}]}, {\"bearer_token_file\": \"/var/run/secrets/kubernetes.io/serviceaccount/token\", \"job_name\": \"kubernetes_apiservers\", \"kubernetes_sd_configs\": [{\"role\": \"endpoints\"}], \"relabel_configs\": [{\"action\": \"keep\", \"regex\": \"default;kubernetes;https\", \"source_labels\": [\"__meta_kubernetes_namespace\", \"__meta_kubernetes_service_name\", \"__meta_kubernetes_endpoint_port_name\"]}], \"scheme\": \"https\", \"tls_config\": {\"ca_file\": \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\", \"insecure_skip_verify\": true}}, {\"bearer_token_file\": \"/var/run/secrets/kubernetes.io/serviceaccount/token\", \"job_name\": \"kubernetes_nodes\", \"kubernetes_sd_configs\": [{\"role\": \"node\"}], \"relabel_configs\": [{\"action\": \"labelmap\", \"regex\": \"__meta_kubernetes_node_label_(.+)\"}], \"scheme\": \"https\", \"tls_config\": {\"ca_file\": \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\", \"insecure_skip_verify\": true}}, {\"job_name\": \"kubernetes_pods\", \"kubernetes_sd_configs\": [{\"role\": \"pod\"}], \"relabel_configs\": [{\"action\": \"keep\", \"regex\": true, \"source_labels\": [\"__meta_kubernetes_pod_annotation_prometheus_io_scrape\"]}, {\"action\": \"replace\", \"regex\": \"(.+)\", \"source_labels\": [\"__meta_kubernetes_pod_annotation_prometheus_io_path\"], \"target_label\": \"__metrics_path__\"}, {\"action\": \"replace\", \"regex\": \"(.+):(?:\\\\d+);(\\\\d+)\", \"replacement\": \"${1}:${2}\", \"source_labels\": [\"__address__\", \"__meta_kubernetes_pod_annotation_prometheus_io_port\"], \"target_label\": \"__address__\"}, {\"action\": \"labelmap\", \"regex\": \"__meta_kubernetes_pod_label_(.+)\"}, {\"action\": \"replace\", \"source_labels\": [\"__meta_kubernetes_namespace\"], \"target_label\": \"kubernetes_namespace\"}, {\"action\": \"replace\", \"source_labels\": [\"__meta_kubernetes_pod_name\"], \"target_label\": \"kubernetes_pod_name\"}]}, {\"job_name\": \"kubernetes_service_endpoints\", \"kubernetes_sd_configs\": [{\"role\": \"endpoints\"}], \"relabel_configs\": [{\"action\": \"keep\", \"regex\": true, \"source_labels\": [\"__meta_kubernetes_service_annotation_prometheus_io_scrape\"]}, {\"action\": \"replace\", \"regex\": \"(https?)\", \"source_labels\": [\"__meta_kubernetes_service_annotation_prometheus_io_scheme\"], \"target_label\": \"__scheme__\"}, {\"action\": \"replace\", \"regex\": \"(.+)\", \"source_labels\": [\"__meta_kubernetes_service_annotation_prometheus_io_path\"], \"target_label\": \"__metrics_path__\"}, {\"action\": \"replace\", \"regex\": \"(.+)(?::\\\\d+);(\\\\d+)\", \"replacement\": \"$1:$2\", \"source_labels\": [\"__address__\", \"__meta_kubernetes_service_annotation_prometheus_io_port\"], \"target_label\": \"__address__\"}, {\"action\": \"labelmap\", \"regex\": \"__meta_kubernetes_service_label_(.+)\"}, {\"action\": \"replace\", \"source_labels\": [\"__meta_kubernetes_namespace\"], \"target_label\": \"kubernetes_namespace\"}, {\"action\": \"replace\", \"source_labels\": [\"__meta_kubernetes_service_name\"], \"target_label\": \"kubernetes_name\"}]}, {\"job_name\": \"kubernetes_services\", \"kubernetes_sd_configs\": [{\"role\": \"service\"}], \"metrics_path\": \"/probe\", \"params\": {\"module\": [\"http_2xx\"]}, \"relabel_configs\": [{\"action\": \"keep\", \"regex\": true, \"source_labels\": [\"__meta_kubernetes_service_annotation_prometheus_io_probe\"]}, {\"source_labels\": [\"__address__\"], \"target_label\": \"__param_target\"}, {\"replacement\": \"blackbox\", \"target_label\": \"__address__\"}, {\"source_labels\": [\"__param_target\"], \"target_label\": \"instance\"}, {\"action\": \"labelmap\", \"regex\": \"__meta_kubernetes_service_label_(.+)\"}, {\"source_labels\": [\"__meta_kubernetes_service_namespace\"], \"target_label\": \"kubernetes_namespace\"}, {\"source_labels\": [\"__meta_kubernetes_service_name\"], \"target_label\": \"kubernetes_name\"}]}, {\"job_name\": \"prometheus\", \"static_configs\": [{\"targets\": [\"localhost:9090\"]}]}]}",
      "sre.rules": "# Constantly restarting containers\nALERT CrashLooping\n  IF sum(rate(kube_pod_container_status_restarts[15m])) by (namespace,container) * 3600 > 0\n  FOR 1h\n  LABELS { severity = \"notice\" }\n  ANNOTATIONS {\n    summary = \"Frequently restarting containers\",\n    description = \"{{ $labels.namespace }}/{{ $labels.container }} is restarting {{ $value }} times per hour\",\n  }\n\n# NB: Probably won't be able to alert, if the config is sufficiently broken.\nALERT PrometheusBadConfig\n  IF prometheus_config_last_reload_successful{kubernetes_namespace=\"monitoring\"} == 0\n  FOR 10m\n  LABELS { severity = \"critical\" }\n  ANNOTATIONS {\n    summary = \"Prometheus failed to reload config\",\n    description = \"Config error with prometheus, see container logs\",\n  }\n\n# NB: Probably won't be able to alert, if the config is sufficiently broken.\nALERT AlertmanagerBadConfig\n  IF alertmanager_config_last_reload_successful{kubernetes_namespace=\"monitoring\"} == 0\n  FOR 10m\n  LABELS { severity = \"critical\" }\n  ANNOTATIONS {\n    summary = \"Alertmanager failed to reload config\",\n    description = \"Config error with alertmanager, see container logs\",\n  }\n\n# NB: Probably won't be able to alert, if prom/am are hard down.\nALERT MonitoringJobDown\n  IF up{kubernetes_namespace=\"monitoring\", name=\"prometheus\"} != 1 or\n     up{kubernetes_namespace=\"monitoring\", name=\"alertmanager\"} != 1 or\n     up{kubernetes_namespace=\"monitoring\", name=\"blackbox\"} != 1 or\n     up{kubernetes_namespace=\"monitoring\", name=\"kube-state-metrics\"} != 1\n  FOR 10m\n  LABELS { severity = \"critical\" }\n  ANNOTATIONS {\n    summary = \"Required monitoring job is not running\",\n    description = \"{{ $labels.kubernetes_namespace }}/{{ $labels.kubernetes_name }} is down\",\n  }\n\n# This \"legitimately\" gets out of sync during a cluster\n# rolling-update, and the impact isn't as great - so use a more\n# forgiving duration.\nALERT MonitoringJobDownNode\n  IF sum(up{kubernetes_namespace=\"monitoring\",name=\"node-exporter\"}) !=\n     sum(kube_node_status_ready{condition=\"true\"})\n  FOR 60m\n  LABELS { severity = \"warning\" }\n  ANNOTATIONS {\n    summary = \"Node-level monitoring job is not running\",\n    description = \"node-exporter is down\",\n  }\n\nALERT UnderservedAZ\n  IF sum(up{job=\"kubernetes_nodes\"}) by (failure_domain_beta_kubernetes_io_zone) < 2\n  FOR 1h\n  TODO: LABELS { severity = \"notice\" }\n  ANNOTATIONS {\n    summary = \"Not enough nodes in AZ\",\n    description = \"Only {{ $value }} nodes are up in AZ {{ $labels.failure_domain_beta_kubernetes_io_zone }}\",\n  }\n\n# This is alerting on a cause rather than a symptom, so is likely to be\n# noisy.  May want to revisit/remove.\nALERT NodeNotReady\n  IF max(kube_node_status_ready{condition=\"false\"} == 1) by (node)\n  FOR 1d\n  TODO: LABELS { severity = \"notice\" }\n  ANNOTATIONS {\n    summary = \"Node not ready for a long time\",\n    description = \"{{ $labels.node }} has been unready for more than a day\",\n  }\n\nALERT K8sApiUnavailable\n  IF max(up{job=\"kubernetes_apiservers\"}) != 1\n  FOR 10m\n  TODO: LABELS { severity = \"critical\" }\n  ANNOTATIONS {\n    summary = \"Kubernetes API is unavailable\",\n    description = \"Kubernetes API is not responding\",\n  }\n"
   },
   "kind": "ConfigMap",
   "metadata": {
      "annotations": { },
      "labels": {
         "name": "prometheus"
      },
      "name": "prometheus",
      "namespace": "monitoring"
   }
}
